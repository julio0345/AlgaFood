package com.algaworks.algafood.api.controller;

import java.util.List;

import org.springframework.beans.BeanUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.algaworks.algafood.api.model.KitchenXMLWrapper;
import com.algaworks.domain.model.Kitchen;
import com.algaworks.domain.service.KitchenService;

@RestController
@RequestMapping("/kitchens")
public class KitchenController {
	
	@Autowired
	private KitchenService service;
	
	
	@GetMapping(produces = {MediaType.APPLICATION_JSON_VALUE, MediaType.APPLICATION_XML_VALUE})
	public List<Kitchen> getAll(){
		return service.getAll();
	}
	
//	@GetMapping("/{id}")
//	public Kitchen get(@PathVariable Long id) {
//		return repository.get(id);
//	}
	
	@ResponseStatus(HttpStatus.OK)
	@GetMapping(value = "/xml", produces = MediaType.APPLICATION_XML_VALUE)
	public KitchenXMLWrapper getAllXML() {
		return new KitchenXMLWrapper(service.getAll());
	}
	
	@GetMapping("/{id}")
	public ResponseEntity<Kitchen> get(@PathVariable Long id){
		Kitchen kitchen = service.get(id);
		
		//Create a Header here to return
		HttpHeaders headers = new HttpHeaders();
		headers.add(HttpHeaders.LOCATION, "New HTTP://leroleor.com.br");
		return ResponseEntity.status(HttpStatus.FOUND)
				.headers(headers)
				.body(kitchen); // retornaria isso
		//return ResponseEntity.status(HttpStatus.OK).body(kitchen);
	}
	
	@PostMapping
	public ResponseEntity<Kitchen> add(@RequestBody Kitchen kitchen){
		kitchen = service.save(kitchen);
		return ResponseEntity.status(HttpStatus.CREATED)
				.body(kitchen);
	}
	
	@PutMapping("/{id}")
	public ResponseEntity<Kitchen> put(@PathVariable Long id, @RequestBody Kitchen kitchen){		
		Kitchen currenty = service.get(id);
		
		if(currenty != null) {
			BeanUtils.copyProperties(kitchen, currenty, "id");
			currenty = service.save(currenty);
			return ResponseEntity.ok(currenty);
		}
		else {
			return ResponseEntity.notFound().build();
		}
	}
	
	@DeleteMapping("/{id}")
	public ResponseEntity<Kitchen> delete(@PathVariable Long id){		
		try {
			Kitchen kitchen = service.get(id);
			
			if(kitchen != null) {
				service.delete(kitchen);
				return ResponseEntity.noContent().build();
			}
			else {
				return ResponseEntity.notFound().build();
			}	
		}
		catch (DataIntegrityViolationException ex) {
			return ResponseEntity.status(HttpStatus.CONFLICT).build();
		}
	}
}